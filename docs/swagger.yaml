basePath: /api
definitions:
  entities.Admin:
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
    type: object
  entities.Facial:
    properties:
      create_by:
        type: integer
      name:
        type: string
    type: object
  entities.Skincare:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  presentation.Responses:
    properties:
      data: {}
      error: {}
      status:
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for Project S.
  title: Project S API
  version: "1.0"
paths:
  /acne:
    get:
      consumes:
      - application/json
      description: Get acnes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Get acnes
      tags:
      - acne
  /acne/:
    post:
      consumes:
      - application/json
      description: Create an acne
      parameters:
      - in: formData
        name: create_by
        type: integer
      - in: formData
        name: name
        type: string
      - description: Acne Image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Create an acne
      tags:
      - acne
  /acne/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an acne by ID
      parameters:
      - description: Acne ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Delete an acne by ID
      tags:
      - acne
    get:
      consumes:
      - application/json
      description: Get acne
      parameters:
      - description: Acne ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Get acne
      tags:
      - acne
    put:
      consumes:
      - application/json
      description: Update an acne by ID
      parameters:
      - description: Acne ID
        in: path
        name: id
        required: true
        type: integer
      - in: formData
        name: create_by
        type: integer
      - in: formData
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Update an acne by ID
      tags:
      - acne
  /admin/facial:
    post:
      consumes:
      - application/json
      description: Create facial
      parameters:
      - description: Facial image
        in: formData
        name: file
        required: true
        type: file
      - in: formData
        name: create_by
        type: integer
      - in: formData
        name: name
        type: string
      - description: Token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Create facial
      tags:
      - facial
  /admin/facial/{id}:
    delete:
      consumes:
      - application/json
      description: Delete facial by ID
      parameters:
      - description: Facial ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Delete facial by ID
      tags:
      - facial
    put:
      consumes:
      - application/json
      description: Update facial by ID
      parameters:
      - description: Facial ID
        in: path
        name: id
        required: true
        type: integer
      - description: Facial information
        in: body
        name: facial
        required: true
        schema:
          $ref: '#/definitions/entities.Facial'
      produces:
      - application/json
      responses: {}
      summary: Update facial by ID
      tags:
      - facial
  /admin/login:
    post:
      consumes:
      - application/json
      description: Log in
      parameters:
      - description: Admin Object
        in: body
        name: admin
        required: true
        schema:
          properties:
            email:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Log in
      tags:
      - admin
  /admin/manage:
    get:
      consumes:
      - application/json
      description: Get admins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Get admins
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create an admin
      parameters:
      - in: formData
        name: email
        type: string
      - in: formData
        name: fullname
        type: string
      - in: formData
        name: password
        type: string
      - description: Admin Image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Create an admin
      tags:
      - admin
  /admin/manage/:
    put:
      consumes:
      - application/json
      description: Update an admin by ID
      parameters:
      - description: Admin Object
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/entities.Admin'
      - description: Admin Token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Update an admin by ID
      tags:
      - admin
  /admin/manage/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an admin by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Delete an admin by ID
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Get an admin by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Get an admin by ID
      tags:
      - admin
  /admin/profile:
    get:
      consumes:
      - application/json
      description: Get an admin by token
      parameters:
      - description: Admin Token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Get an admin by token
      tags:
      - admin
  /admin/skincare:
    post:
      consumes:
      - application/json
      description: Create a skincare
      parameters:
      - in: formData
        name: description
        type: string
      - in: formData
        name: name
        type: string
      - description: Skincare Image
        in: formData
        name: file
        required: true
        type: file
      - description: Token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Create a skincare
      tags:
      - skincare
  /admin/skincare/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a skincare
      parameters:
      - description: Skincare ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Delete a skincare
      tags:
      - skincare
    put:
      consumes:
      - application/json
      description: Update a skincare
      parameters:
      - description: Skincare ID
        in: path
        name: id
        required: true
        type: integer
      - description: Skincare Object
        in: body
        name: skincare
        required: true
        schema:
          $ref: '#/definitions/entities.Skincare'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Update a skincare
      tags:
      - skincare
  /facial:
    get:
      consumes:
      - application/json
      description: Get all facials
      produces:
      - application/json
      responses: {}
      summary: Get all facials
      tags:
      - facial
  /facial/{id}:
    get:
      consumes:
      - application/json
      description: Get facial by ID
      parameters:
      - description: Facial ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get facial by ID
      tags:
      - facial
  /skincare:
    get:
      consumes:
      - application/json
      description: Get skincares
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Get skincares
      tags:
      - skincare
  /skincare/{id}:
    get:
      consumes:
      - application/json
      description: Get a skincare
      parameters:
      - description: Skincare ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presentation.Responses'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presentation.Responses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/presentation.Responses'
      summary: Get a skincare
      tags:
      - skincare
swagger: "2.0"
